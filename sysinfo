#!/bin/bash
# vi: se fdm=marker

VERSION=0.1
NO=no
YES=yes
DEBUG=0
PLATFORM=
BATTERY=
NETWORK=
ONELINE=
SEP=" | "
ORDER="nvbas"
AUDIO=
SCREEN=
MUTE=
MICMUTE=
INCVOL=
DECVOL=
INCBRIGHT=
DECBRIGHT=
COLORING=
XMOBAR=
VPN=
TAGS=$YES

# Get platform {{{1
################################################################

function get_platform {
	[[ -n $PLATFORM ]] || PLATFORM=$(uname)
	echo $PLATFORM
}

# Print help {{{1
################################################################

function print_help {
	echo "Usage: sysinfo [options]"
	echo
	echo "Options:"
	echo "   -a, --audio          Print audio volume information."
	echo "   -b, --battery        Display battery information."
	echo "   -c, --coloring       Enable coloring of output."
	echo "   -g, --debug          Debug mode."
	echo "       --decbright      Decrease screen brightness."
	echo "       --decvol         Decrease audio volume."
	echo "   -h, --help           Print this help message."
	echo "       --incbright      Increase screen brightness."
	echo "       --incvol         Increase audio volume."
	echo "   -l, --oneline        Print information on one line only."
	echo "       --micmute        Mute/unmute microphone."
	echo "       --mute           Mute/unmute audio."
	echo "   -n, --network        Display network information."
	echo "       --no-tags        Do not use tags as prefix of information."
	echo "   -o, --order          Set order of information display. Default is $ORDER."
	echo "   -s, --screen         Print screen brightness information."
	echo "   -v, --vpn            Print VPN connection status."
	echo "   -x, --xmobar         Output for xmobar."
}

# Error {{{1
################################################################

function error {

	local msg=$1

	echo "ERROR: $msg" >&2

	exit 1
}

# Debug {{{1
################################################################

function debug {

	local lvl=$1
	local msg=$2

	[[ $DEBUG -ge $lvl ]] && echo "[DEBUG] $msg" >&2
}

# Set color {{{1
################################################################

function set_color {

	local color=$1

	if [[ $COLORING == $YES ]] ; then
		if [[ $XMOBAR == $YES ]] ; then
			case $color in
				green) echo -n "<fc=#00ff00>" ;;
				yellow) echo -n "<fc=#ffff00>" ;;
				orange) echo -n "<fc=#ff8800>" ;;
				red) echo -n "<fc=#ff0000>" ;;
			esac
		else
			case $color in
				green) echo -n $'\e[0;32m' ;;
				yellow) echo -n $'\e[0;33m' ;;
				orange) echo -n $'\e[0;33m' ;;
				red) echo -n $'\e[0;31m' ;;
			esac
		fi
	fi
}

# Unset color {{{1
################################################################

function unset_color {

	if [[ $XMOBAR == $YES ]] ; then
		echo -n "</fc>"
	else
		echo -n $'\e[0m'
	fi
}

# Add coloring {{{1
################################################################

function add_coloring {

	local msg=$1
	local color=$2

	if [[ -n $color ]] ; then
		color_set=$(set_color $color)
		echo -n $color_set$msg
		[[ -z $color_set ]] || unset_color
	else
		echo $msg
	fi
}

# Add level coloring {{{1
################################################################

function add_level_coloring {

	local msg=$1
	local level=$2

	case $level in
		good)           color=green ;;
		highlight|info) color=yellow ;;
		bad)            color=orange ;;
		critical)       color=red ;;
	esac

	add_coloring "$msg" $color
}

# Read args {{{1
################################################################

function read_args {

	local args="$*" # save arguments for debugging purpose
	local print=

	while true ; do
		case $1 in
			-a|--audio)     print=$YES ; AUDIO=$YES ;;
			-b|--battery)   print=$YES ; BATTERY=$YES ;;
			-c|--coloring)  COLORING=$YES ;;
			-g|--debug)     DEBUG=$((DEBUG + 1)) ;;
			-h|--help)      print_help ; exit 0 ;;
			-l|--oneline)   ONELINE=$YES ;;
			-n|--network)   print=$YES ; NETWORK=$YES ;;
			-o|--order)     ORDER=$2 ; shift ;;
			-s|--screen)    print=$YES ; SCREEN=$YES ;;
			-v|--vpn)       print=$YES ; VPN=$YES ;;
			-x|--xmobar)    XMOBAR=$YES ;;
			   --decbright) DECBRIGHT=$YES ;;
			   --decvol)    DECVOL=$YES ;;
			   --incbright) INCBRIGHT=$YES ;;
			   --incvol)    INCVOL=$YES ;;
			   --mute)      MUTE=$YES ;;
			   --micmute)   MICMUTE=$YES ;;
			   --no-tags)   TAGS=$NO ;;
			-)              error "Illegal option $1." ;;
			--)             error "Illegal option $1." ;;
			--*)            error "Illegal option $1." ;;
			-?)             error "Unknown option $1." ;;
			-[^-]*)         split_opt=$(echo $1 | sed 's/^-//' | sed 's/\([a-zA-Z]\)/ -\1/g') ; set -- $1$split_opt "${@:2}" ;;
			*) break
		esac
		shift
	done

	[[ -z $print ]] && AUDIO=$YES
	[[ -z $print ]] && BATTERY=$YES
	[[ -z $print ]] && NETWORK=$YES
	[[ -z $print ]] && SCREEN=$YES
	[[ -z $print ]] && VPN=$YES

	[[ -z "$*" ]] || error "Forbidden remaining arguments: $*."

	# Debug
	debug 1 "Arguments are : $args"
	debug 1 "AUDIO=$AUDIO"
	debug 1 "BATTERY=$BATTERY"
	debug 1 "NETWORK=$NETWORK"
	debug 1 "ONELINE=$ONELINE"
	debug 1 "SCREEN=$SCREEN"
	debug 1 "VPN=$VPN"
	debug 1 "INCVOL=$INCVOL"
	debug 1 "DECVOL=$DECVOL"
	debug 1 "MUTE=$MUTE"
	debug 1 "MICMUTE=$MICMUTE"
	debug 1 "TAGS=$TAGS"
}

# Print battery {{{1
################################################################

function print_battery {

	local charge=
	local plugged=
	local platform=$(get_platform)

	if [[ $platform == Darwin ]] ; then
		charge=$(pmset -g batt | grep InternalBattery | sed -E 's/^.*[[:space:]]([[:digit:]]+)%.*$/\1/')
		plugged=$(pmset -g batt | grep InternalBattery | sed -E -e 's/^.*InternalBattery[^;]*; *([^;]*) *;.*$/\1/' -e 's/discharging/v/' -e 's/charging|AC attached/^/' -e 's/charged//')
	elif [[ $platform == Linux ]] && which acpi 2>&1 >/dev/null ; then
		charge=$(acpi -b | sed 's/^.* \([0-9]\+\)%.*$/\1/')
		plugged=$(acpi -a | sed -e 's/^.* \(on\|off\)-line$/\1/' -e 's/on/^/' -e 's/off/v/')
	else
		debug 1 "Do not know how to get battery information for platform $platform."
	fi

	if [[ -z $charge ]] ; then
		msg="unknown"
		level=critical
	else
		msg="$charge%$plugged"
		[[ $TAGS == $YES ]] && msg="Batt: $msg"
		if [[ $charge -ge 80 ]] ; then
			level=good
		elif [[ $charge -ge 20 ]] ; then
			level=bad
		else
			level=critical
		fi
	fi

	local msg=$(add_level_coloring "$msg" $level)
	echo -n $msg
}

# Print network {{{1
################################################################

function print_network {

	local msg=
	local connection=
	local wifi_off=

	# Linux
	if [[ $(get_platform) == Linux ]] ; then

		# WiFi
		local wifi_card=$(iw dev | grep Interface | head -n 1 | sed 's/^\s*Interface *//')
		if [[ -n $wifi_card ]] ; then
			local wifi_ssid=$(iw dev | grep ssid | head -n 1 | sed 's/^\s*ssid *//')
			if [[ -n $wifi_ssid ]] ; then
				local wifi_link_quality=$(grep $wifi_card /proc/net/wireless | sed 's/^[^:]*:\s\+[0-9]\+\s\+\([0-9]\+\)\..*$/\1/')
				local wifi_signal_level=$(grep $wifi_card /proc/net/wireless | sed 's/^[^:]*:\s\+[0-9]\+\s\+[0-9.-]\+\s\+\(-[0-9]\+\)\..*$/\1/')
				local ip=$(ifconfig $wifi_card | grep 'inet ' | sed 's/^ *inet *\([0-9.]\+\).*$/\1/')
				# Link quality maximum is 70
				# Signal level is in dBm (dB mW = decibel-milliwatts, power ratio in dB for one mW).
				msg="$wifi_card $wifi_ssid $ip $wifi_link_quality/70 ${wifi_signal_level}dBm"
				[[ $TAGS == $YES ]] && msg="WiFi: $msg"
				if [[ $wifi_link_quality -ge 60 ]] ; then
					level=good
				elif [[ $wifi_link_quality -ge 40 ]] ; then
					level=bad
				else
					level=critical
				fi
				connection=wifi
			else
				wifi_off=$(networkctl list | grep $wifi_card | grep off)
			fi
		fi

		# USB Hotspot
		if [[ -z $connection ]] ; then
			local conn=$(networkctl list | grep 'ether *routable')
			if [[ -n $conn ]] ; then
				local card=$(echo $conn | sed 's/^ *[0-9]\+ \([^ ]\+\) *.*$/\1/')
				local usb=$(networkctl status $card | grep usb)
				if [[ -n $usb ]] ; then
					local model=$(networkctl status $card | grep Model | sed 's/^ *Model: *\(.*\)$/\1/')
					connection=usb
					msg="USB $model"
					level=good
				fi
			fi
		fi

		# No connection
		if [[ -z $connection ]] ; then
			if [[ -n $wifi_off ]] ; then
				msg="WiFi off"
			else
				msg="Not connected"
			fi
			level=critical
		fi

	# Unknown platform
	else
		debug 1 "Do not know how to get network information for platform $(get_platform)."
	fi

	local msg=$(add_level_coloring "$msg" $level)
	echo -n "$msg"
}

# Print audio {{{1
################################################################

function print_audio {

	local muted=$(pactl list sinks | grep -i 'mute: *yes')
	local level=

	if [[ -n $muted ]] ; then
		msg=muted
		level=highlight
	else
		vol=$(pactl list sinks | grep -i volume | head -n 1 | sed 's/^.*[^0-9]\([0-9]\+\)%.*$/\1/')
		msg="$vol%"
		if [[ $vol -le 70 ]] ; then
			level=good
		elif [[ $vol -le 100 ]] ; then
			level=bad
		else
			level=critical
		fi
	fi

	[[ $TAGS == $YES ]] && msg="Audio: $msg"
	msg=$(add_level_coloring "$msg" $level)
	echo -n $msg
}

# Get screen brightness {{{1
################################################################

function get_screen_brightness {

	local brightness=
	local displays=$(xrandr -q | grep ' connected' | sed 's/^\([^ ]*\) .*$/\1/')
	# Get brightness of first display
	for display in $displays ; do
		brightness=$(xrandr --verbose | grep -i brightness | head -n 1 | sed 's/.*[Bb]rightness: *\([0-9.]*\)$/\1/')
	done

	echo $brightness
}

# Print screen brightness {{{1
################################################################

function print_screen_brightness {
	local brightness=$(get_screen_brightness)
	local percent_brightness=$(echo "scale=0;$brightness * 100 / 1" | bc -l)
	local level=
	if [[ $percent_brightness -le 70 ]] ; then
		level=good
	elif [[ $percent_brightness -le 100 ]] ; then 
		level=bad
	else
		level=critical
	fi
	local msg="${percent_brightness}%"
	[[ $TAGS == $YES ]] && msg="Brightness: $msg"
	local msg=$(add_level_coloring "$msg" $level)
	echo -n $msg
}

# Modify screen brightness {{{1
################################################################

function modify_screen_brightness {

	local step=0.1
	local max=2.0
	local min=0.1
	local op='+'

	# Get current brightness
	brightness=$(get_screen_brightness)

	# Compute new brightness
	if [[ $DECBRIGHT == $YES ]] ; then
		op='-'
	fi
	brightness=$(echo "$brightness $op $step" | bc -l)
	if [[ $(echo "$brightness > $max" | bc -l) -eq 1 ]] ; then
		brightness=$max
	fi
	if [[ $(echo "$brightness < $min" | bc -l) -eq 1 ]] ; then
		brightness=$min
	fi

	# Set _SAME_ brightness on all displays
	displays=$(xrandr -q | grep ' connected' | sed 's/^\([^ ]*\) .*$/\1/')
	for display in $displays ; do
		xrandr --output $display --brightness $brightness
	done
}

# Modify system {{{1
################################################################

function modify_system {

	[[ $MUTE == $YES ]] && pactl set-sink-mute @DEFAULT_SINK@ toggle
	[[ $MICMUTE == $YES ]] && pactl set-source-mute @DEFAULT_SOURCE@ toggle
	[[ $INCVOL == $YES ]] && pactl set-sink-volume @DEFAULT_SINK@ +10%
	[[ $DECVOL == $YES ]] && pactl set-sink-volume @DEFAULT_SINK@ -10%
	[[ $DECBRIGHT == $YES || $INCBRIGHT == $YES ]] && modify_screen_brightness
}

# Print VPN info {{{1
################################################################

function print_vpn {

	local msg="VPN"
	local level=

	local vpn=$(ps uxw | grep forticlientsslvpn_cli | grep -v grep)
	if [[ -n $vpn ]] ; then
		local ip=$(ifconfig ppp0 | grep 'inet ' | sed 's/^ *inet *\([0-9.]\+\).*$/\1/')
		if [[ -n $ip ]] ; then
			msg="$msg $ip"
			level=good
		else
			msg="$msg broken or closed"
			level=critical
		fi
	else
		msg="$msg off"
		level=info
	fi

	msg=$(add_level_coloring "$msg" $level)
	echo -n $msg
}

# Main {{{1
################################################################

read_args "$@"

modify_system

n_printed=0
for x in $(echo $ORDER | sed "s/\(.\)/\1 /g") ; do

	# Get command to run
	case $x in
		a) test_var=AUDIO   ; cmd=print_audio ;;
		b) test_var=BATTERY ; cmd=print_battery ;;
		n) test_var=NETWORK ; cmd=print_network ;;
		v) test_var=VPN     ; cmd=print_vpn ;;
		s) test_var=SCREEN  ; cmd=print_screen_brightness ;;
	esac

	# Run command
	if [[ -n $test_var && -n $cmd && ${!test_var} == $YES ]] ; then
		msg=$($cmd)
		if [[ -n $msg ]] ; then
			[[ $ONELINE == $YES && $n_printed -gt 0 ]] && echo -n "$SEP"
			echo -n $msg
			[[ $ONELINE == $YES ]] || echo
		fi
		((++n_printed))
	fi
done

[[ $ONELINE == $YES ]] && echo

exit 0
