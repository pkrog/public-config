#!/bin/bash

VERSION=0.1
YES=yes
DEBUG=0
PLATFORM=
BATTERY=
NETWORK=
ONELINE=
ECHO_FLAGS=
SEP=" | "
ORDER="nbas"
AUDIO=
SCREEN=

function get_platform {
	[[ -n $PLATFORM ]] || PLATFORM=$(uname)
	echo $PLATFORM
}

function print_help {
	echo "Usage: sysinfo [options]"
	echo
	echo "Options:"
	echo "   -a, --audio          Print audio volume information."
	echo "   -b, --battery        Display battery information."
	echo "   -g, --debug          Debug mode."
	echo "   -h, --help           Print this help message."
	echo "   -l, --oneline        Print information on one line only."
	echo "   -n, --network        Display network information."
	echo "   -o, --order          Set order of information display. Default is $ORDER."
	echo "   -s, --screen         Print screen brightness information."
}

function error {

	local msg=$1

	echo "ERROR: $msg" >&2

	exit 1
}


function debug {

	local lvl=$1
	local msg=$2

	[[ $DEBUG -ge $lvl ]] && echo "[DEBUG] $msg" >&2
}

function read_args {

	local args="$*" # save arguments for debugging purpose
	local print=

	while true ; do
		case $1 in
			-a|--audio)     print=$YES ; AUDIO=$YES ;;
			-b|--battery)   print=$YES ; BATTERY=$YES ;;
			-g|--debug)     DEBUG=$((DEBUG + 1)) ;;
			-h|--help)      print_help ; exit 0 ;;
			-l|--oneline)   ONELINE=$YES ;;
			-n|--network)   print=$YES ; NETWORK=$YES ;;
			-o|--order)     ORDER=$2 ; shift ;;
			-s|--screen)    print=$YES ; SCREEN=$YES ;;
			-)              error "Illegal option $1." ;;
			--)             error "Illegal option $1." ;;
			--*)            error "Illegal option $1." ;;
			-?)             error "Unknown option $1." ;;
			-[^-]*)         split_opt=$(echo $1 | sed 's/^-//' | sed 's/\([a-zA-Z]\)/ -\1/g') ; set -- $1$split_opt "${@:2}" ;;
			*) break
		esac
		shift
	done

	[[ -z $print ]] && AUDIO=$YES
	[[ -z $print ]] && BATTERY=$YES
	[[ -z $print ]] && NETWORK=$YES
	[[ -z $print ]] && SCREEN=$YES

	[[ -z "$*" ]] || error "Forbidden remaining arguments: $*."

	# Debug
	debug 1 "Arguments are : $args"
	debug 1 "AUDIO=$AUDIO"
	debug 1 "BATTERY=$BATTERY"
	debug 1 "NETWORK=$NETWORK"
	debug 1 "ONELINE=$ONELINE"
	debug 1 "SCREEN=$SCREEN"
}

function print_battery {

	local charge=
	local plugged=

	if [[ $(get_platform) == Darwin ]] ; then
		charge=$(pmset -g batt | grep InternalBattery | sed -E 's/^.*[[:space:]]([[:digit:]]+%).*$/\1/')
		plugged=$(pmset -g batt | grep InternalBattery | sed -E -e 's/^.*InternalBattery[^;]*; *([^;]*) *;.*$/\1/' -e 's/discharging/v/' -e 's/charging|AC attached/^/' -e 's/charged//')
	elif [[ $(get_platform) == Linux ]] && which acpi 2>&1 >/dev/null ; then
		charge=$(acpi -b | sed 's/^.* \([0-9]\+%\).*$/\1/')
		plugged=$(acpi -a | sed -e 's/^.* \(on\|off\)-line$/\1/' -e 's/on/^/' -e 's/off/v/')
	else
		debug 1 "Do not know how to get battery information for platform $(get_platform)."
	fi

	echo $ECHO_FLAGS "Batt: $charge$plugged"
}

function print_network {

	local wifi_card=
	local wifi_ssid=
	local wifi_link_quality= # Link quality maximum is 70
	local wifi_signal_level= # Signal level is in dBm (dB mW = decibel-milliwatts, power ratio in dB for one mW).

	# Use /proc
	if [[ $(get_platform) == Linux ]] ; then

		wifi_card=$(iw dev | grep Interface | head -n 1 | sed 's/^\s*Interface *//')
		wifi_ssid=$(iw dev | grep ssid | head -n 1 | sed 's/^\s*ssid *//')
		wifi_link_quality=$(grep $wifi_card /proc/net/wireless | sed 's/^[^:]*:\s\+[0-9]\+\s\+\([0-9]\+\)\..*$/\1/')
		wifi_signal_level=$(grep $wifi_card /proc/net/wireless | sed 's/^[^:]*:\s\+[0-9]\+\s\+[0-9.-]\+\s\+\(-[0-9]\+\)\..*$/\1/')

	# No info
	else
		debug 1 "Do not know how to get network information for platform $(get_platform)."
	fi

	echo $ECHO_FLAGS "WiFi: $wifi_card $wifi_ssid $wifi_link_quality/70 $wifi_signal_level dBm"
}

function print_audio {
	muted=$(pactl list sinks | grep -i 'mute: *yes')
	if [[ -n $muted ]] ; then
		msg=muted
	else
		msg=$(pactl list sinks | grep -i volume | head -n 1 | sed 's/^.*[^0-9]\([0-9]\+%\).*$/\1/')
	fi
	echo $ECHO_FLAGS "Audio: $msg"
}

function get_screen_brightness {

	local brightness=
	local displays=$(xrandr -q | grep ' connected' | sed 's/^\([^ ]*\) .*$/\1/')
	# Get brightness of first display
	for display in $displays ; do
		brightness=$(xrandr --verbose | grep -i brightness | head -n 1 | sed 's/.*[Bb]rightness: *\([0-9.]*\)$/\1/')
	done

	echo $brightness
}

function print_screen {
	brightness=$(get_screen_brightness)
	percent_brightness=$(echo "scale=0;$brightness * 100 / 1" | bc -l)
	echo $ECHO_FLAGS "Brightness: ${percent_brightness}%"
}

# Main

read_args "$@"

[[ $ONELINE == $YES ]] && ECHO_FLAGS=-n

n_printed=0
for x in $(echo $ORDER | sed "s/\(.\)/\1 /g") ; do

	# Get command to run
	case $x in
		a) test_var=AUDIO   ; cmd=print_audio ;;
		b) test_var=BATTERY ; cmd=print_battery ;;
		n) test_var=NETWORK ; cmd=print_network ;;
		s) test_var=SCREEN  ; cmd=print_screen ;;
	esac

	# Run command
	if [[ -n $test_var && -n $cmd && ${!test_var} == $YES ]] ; then
		[[  $ONELINE == $YES && $n_printed -gt 0 ]] && echo -n "$SEP"
		$cmd
		((++n_printed))
	fi
done

[[ $ONELINE == $YES ]] && echo

exit 0
